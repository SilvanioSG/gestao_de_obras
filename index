{
  "nbformat": 4,
  "nbformat_minor": 5,
  "metadata": {
    "colab": {
      "name": "Combined_ConstruFort_Analysis.ipynb",
      "provenance": [],
      "authorship_tag": "GEMINI-GENERATED-NOTEBOOK"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div align=\"center\">\n",
        "  <img src=\"https://drive.google.com/uc?id=1MteW-lnsmqSqwHkq9RFrxYoeRDF-nF_J\" alt=\"Logo_br_Site\" width=\"200\"/>\n",
        "  <h1>An√°lise Consolidada da ConstruFort Ltda.</h1>\n",
        "  <p>Graduando em Processos Gerenciais, T√©cnico em Administra√ß√£o (CRA-SP/CFA) e T√©cnico em Edifica√ß√µes (CRT-SP/CFT).</p>\n",
        "</div>\n",
        "---"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "execution_count": null,
      "outputs": [],
      "source": [
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ecbd1416",
      "metadata": {},
      "source": [
        "\n",
        "# üèóÔ∏è M√≥dulo 1 ‚Äì An√°lise de Obras da ConstruFort Ltda.\\n",
        "\n",
        "Este notebook faz parte de um projeto de an√°lise profissional da empresa **ConstruFort Ltda.**, com foco em entender o desempenho financeiro e cronol√≥gico das obras em andamento ou conclu√≠das.\\n",
        "\n",
        "## üéØ Objetivo\\n",
        "Identificar obras com **risco de estouro de custo e prazo**, auxiliando gestores a priorizarem a√ß√µes corretivas.\\n",
        "\n",
        "---\\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "95e7c950",
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "import pandas as pd\\n",
        "import plotly.express as px\\n",
        "import plotly.graph_objects as go\\n",
        "\n",
        "# Configura√ß√£o geral de exibi√ß√£o\\n",
        "pd.set_option('display.max_columns', None)\\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "afad0e29",
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "# üîΩ Carregar dados das obras\\n",
        "df_obras = pd.read_csv('/content/drive/MyDrive/Construfort/obras_construfort.csv', sep=';', decimal=',')\\n",
        "\n",
        "# Converter datas\\n",
        "df_obras['Data_In√≠cio'] = pd.to_datetime(df_obras['Data_In√≠cio'])\\n",
        "df_obras['Data_Fim'] = pd.to_datetime(df_obras['Data_Fim'])\\n",
        "\n",
        "# Visualizar as primeiras linhas\\n",
        "df_obras.head()\\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d0467ebc",
      "metadata": {},
      "source": [
        "\n",
        "## üìä An√°lise de desvios de custo e prazo\\n",
        "\n",
        "**Problema**: Obras que est√£o consumindo mais recursos do que o previsto ou que est√£o com atraso podem comprometer o resultado financeiro da empresa.\\n",
        "\n",
        "**Abordagem**:\\n",
        "- Calcular o desvio de custo: diferen√ßa entre custo real e estimado.\\n",
        "- Calcular o atraso (dias) entre hoje e a data prevista de fim.\\n",
        "- Identificar obras com **desvio > 20%** no custo ou **atraso > 30 dias**.\\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "0a7f578f",
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "# Calcular desvio de custo\\n",
        "df_obras['Desvio_Custo'] = df_obras['Custo_Real'] - df_obras['Custo_Estimado']\\n",
        "df_obras['Desvio_Custo (%)'] = (df_obras['Desvio_Custo'] / df_obras['Custo_Estimado']) * 100\\n",
        "\n",
        "# Calcular atraso (considerando apenas obras em andamento ou atrasadas)\\n",
        "data_atual = pd.to_datetime('today')\\n",
        "df_obras['Atraso (dias)'] = (data_atual - df_obras['Data_Fim']).dt.days\\n",
        "df_obras.loc[df_obras['Atraso (dias)'] < 0, 'Atraso (dias)'] = 0 # N√£o consideramos 'adiantado' como atraso negativo\\n",
        "\n",
        "# Identificar obras de risco\\n",
        "df_risco = df_obras[((df_obras['Desvio_Custo (%)'] > 20) | (df_obras['Atraso (dias)'] > 30))].copy()\\n",
        "df_risco = df_risco[['ID_Obra', 'Nome_Obra', 'Status', 'Desvio_Custo (%)', 'Atraso (dias)', 'Custo_Estimado', 'Custo_Real']]\\n",
        "\n",
        "display(df_risco)\\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "92186ddf",
      "metadata": {},
      "source": [
        "\n",
        "## üìà Visualiza√ß√£o: Obras com Risco Elevado\\n",
        "\n",
        "**Insight**: O gr√°fico abaixo visualiza as obras identificadas com alto risco de desvio de custo e/ou prazo, facilitando a prioriza√ß√£o de interven√ß√µes.\\n",
        "\n",
        "**Visualiza√ß√£o**: Gr√°fico de barras combinando desvio de custo e atraso.\\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "4b684f50",
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "fig_risco_custo = px.bar(df_risco.sort_values('Desvio_Custo (%)', ascending=False),\\n",
        "                        x='Nome_Obra',\\n",
        "                        y='Desvio_Custo (%)',\\n",
        "                        title='Obras com Maior Desvio de Custo (%)')\\n",
        "fig_risco_custo.show()\\n",
        "\\n",
        "fig_risco_atraso = px.bar(df_risco.sort_values('Atraso (dias)', ascending=False),\\n",
        "                        x='Nome_Obra',\\n",
        "                        y='Atraso (dias)',\\n",
        "                        title='Obras com Maior Atraso (dias)')\\n",
        "fig_risco_atraso.show()\\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e2f3a61e",
      "metadata": {},
      "source": [
        "\n",
        "## üìä An√°lise de Progresso das Obras\\n",
        "\n",
        "**Problema**: Dificuldade em visualizar o status atual de cada obra em rela√ß√£o ao seu cronograma planejado.\\n",
        "\n",
        "**Abordagem**: Utilizar um Gr√°fico de Gantt simplificado para mostrar o per√≠odo de cada obra e seu status.\\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "673f4e19",
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "df_gantt = df_obras[['Nome_Obra', 'Data_In√≠cio', 'Data_Fim', 'Status']].copy()\\n",
        "df_gantt = df_gantt.sort_values('Data_In√≠cio')\\n",
        "\\n",
        "fig = px.timeline(df_gantt,\\n",
        "                  x_start=\"Data_In√≠cio\",\\n",
        "                  x_end=\"Data_Fim\",\\n",
        "                  y=\"Nome_Obra\",\\n",
        "                  color=\"Status\",\\n",
        "                  title=\"Cronograma das Obras (Gantt Chart)\")\\n",
        "fig.update_yaxes(autorange=\"reversed\")\\n",
        "fig.show()\\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "93457b5a-de6f-4f20-a3f8-5366548e0f38",
      "metadata": {},
      "source": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "execution_count": null,
      "outputs": [],
      "source": [
        "# üë∑ M√≥dulo 2 ‚Äì An√°lise de Produtividade das Equipes da ConstruFort Ltda.\n",
        "\n",
        "\"\"\"\n",
        "Este m√≥dulo analisa o desempenho das equipes de trabalho alocadas nas obras da ConstruFort Ltda.\n",
        "Com base nos indicadores de produtividade, ajudamos a identificar equipes com baixo rendimento,\n",
        "para que a gest√£o possa tomar decis√µes de realoca√ß√£o, refor√ßo ou treinamentos.\n",
        "\n",
        "---\n",
        "\n",
        "Objetivo:\n",
        "Identificar equipes com baixa efici√™ncia e causas potenciais que impactam prazos e custos.\n",
        "\"\"\"\n",
        "\n",
        "# Importa√ß√£o das bibliotecas necess√°rias\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "\n",
        "# Configura√ß√£o para exibir todas as colunas dos dataframes\n",
        "pd.set_option('display.max_columns', None)\n",
        "\n",
        "# üîΩ Carregar dados de produtividade das equipes\n",
        "df_eq = pd.read_csv('/content/drive/MyDrive/Construfort/equipes_produtividade.csv', sep=';', decimal=',')\n",
        "\n",
        "# Visualizar as primeiras linhas da base para entender os dados\n",
        "display(df_eq.head())\n",
        "\n",
        "# ---------------------------------------------------\n",
        "# üìâ An√°lise de Efici√™ncia das Equipes\n",
        "\n",
        "\"\"\"\n",
        "Problema:\n",
        "Equipes com baixa produtividade podem gerar atrasos e aumentar custos nas obras,\n",
        "afetando a rentabilidade da ConstruFort Ltda.\n",
        "\n",
        "Abordagem:\n",
        "- Utilizar a coluna 'Efici√™ncia (%)' como m√©trica principal.\n",
        "- Filtrar equipes com efici√™ncia abaixo de 75%, indicativo de aten√ß√£o.\n",
        "- Avaliar por tipo de profissional e obra para identificar padr√µes.\n",
        "\"\"\"\n",
        "\n",
        "# Filtrar equipes com baixa efici√™ncia\n",
        "df_baixa_eficiencia = df_eq[df_eq['Efici√™ncia (%)'] < 75].copy()\n",
        "\n",
        "display(df_baixa_eficiencia)\n",
        "\n",
        "# ---------------------------------------------------\n",
        "# üìä Visualiza√ß√£o: Efici√™ncia por Tipo de Profissional\n",
        "\n",
        "\"\"\"\n",
        "Analisar a distribui√ß√£o da efici√™ncia por tipo profissional ajuda a entender\n",
        "se alguns grupos demandam mais aten√ß√£o, treinamento ou substitui√ß√£o.\n",
        "\n",
        "Visualiza√ß√£o: boxplot para comparar varia√ß√µes e outliers.\n",
        "\"\"\"\n",
        "\n",
        "fig = px.box(df_eq,\n",
        "             x='Tipo_Profissional',\n",
        "             y='Efici√™ncia (%)',\n",
        "             color='Tipo_Profissional',\n",
        "             title='Efici√™ncia por Tipo de Profissional')\n",
        "fig.show()\n",
        "\n",
        "# ---------------------------------------------------\n",
        "# üìà Visualiza√ß√£o: Efici√™ncia M√©dia por Obra\n",
        "\n",
        "\"\"\"\n",
        "Avaliar efici√™ncia m√©dia por obra permite identificar obras que concentram\n",
        "equipes com baixo desempenho, podendo ser alvo priorit√°rio de interven√ß√£o.\n",
        "\n",
        "Visualiza√ß√£o: gr√°fico de barras ordenado da obra mais produtiva para a menos produtiva.\n",
        "\"\"\"\n",
        "\n",
        "df_media_obra = df_eq.groupby('Obra_Associada')['Efici√™ncia (%)'].mean().reset_index()\n",
        "\n",
        "fig = px.bar(df_media_obra.sort_values('Efici√™ncia (%)', ascending=False),\n",
        "             x='Obra_Associada',\n",
        "             y='Efici√™ncia (%)',\n",
        "             title='Efici√™ncia M√©dia por Obra')\n",
        "fig.update_layout(xaxis_tickangle=-45)\n",
        "fig.show()\n",
        "\n",
        "# ---------------------------------------------------\n",
        "# Conclus√£o e Pr√≥ximos Passos\n",
        "\n",
        "\"\"\"\n",
        "Com base nos dados, gestores podem:\n",
        "- Priorizar treinamento para equipes e tipos profissionais com efici√™ncia baixa.\n",
        "- Realocar recursos humanos para obras que est√£o com produt...\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# üìä M√≥dulo 3 ‚Äì Painel Gerencial Din√¢mico da ConstruFort Ltda.\\n",
        "\\n",
        "\"\"\"\\n",
        "Este m√≥dulo consolida as informa√ß√µes das obras e das equipes para oferecer uma vis√£o integrada,\\n",
        "permitindo an√°lise din√¢mica e interativa para a tomada de decis√µes estrat√©gicas.\\n",
        "\\n",
        "---\\n",
        "\\n",
        "Objetivo:\\n",
        "Fornecer um dashboard com filtros para explorar custo, prazo e produtividade por obra,\\n",
        "tipo de obra e respons√°vel t√©cnico, facilitando a identifica√ß√£o de gargalos e oportunidades.\\n",
        "\"\"\"\\n",
        "\\n",
        "# Importa√ß√£o das bibliotecas\\n",
        "import pandas as pd\\n",
        "import plotly.express as px\\n",
        "import plotly.graph_objects as go\\n",
        "import ipywidgets as widgets\\n",
        "from IPython.display import display, HTML\\n",
        "from ipywidgets import interact\\n",
        "\\n",
        "# Configura√ß√£o de exibi√ß√£o\\n",
        "pd.set_option('display.max_columns', None)\\n",
        "\\n",
        "# üîΩ Carregar dados das obras e das equipes\\n",
        "df_obras = pd.read_csv('/content/drive/MyDrive/Construfort/obras_construfort.csv', sep=';', decimal=',')\\n",
        "df_equipes = pd.read_csv('/content/drive/MyDrive/Construfort/equipes_produtividade.csv', sep=';', decimal=',')\\n",
        "\\n",
        "# Convers√£o de datas\\n",
        "df_obras['Data_In√≠cio'] = pd.to_datetime(df_obras['Data_In√≠cio'])\\n",
        "df_obras['Data_Fim'] = pd.to_datetime(df_obras['Data_Fim'])\\n",
        "\\n",
        "# Criar uma tabela resumo consolidando custo, prazo e efici√™ncia m√©dia por obra\\n",
        "df_eficiencia = df_equipes.groupby('Obra_Associada')['Efici√™ncia (%)'].mean().reset_index()\\n",
        "df_eficiencia.rename(columns={'Efici√™ncia (%)': 'Efici√™ncia_M√©dia'}, inplace=True)\\n",
        "df_resumo = pd.merge(df_obras, df_eficiencia, left_on='Nome_Obra', right_on='Obra_Associada', how='left')\\n",
        "df_resumo.drop(columns=['Obra_Associada'], inplace=True)\\n",
        "\\n",
        "# Calculando desvios de custo e prazo para o df_resumo tamb√©m\\n",
        "df_resumo['Desvio_Custo'] = df_resumo['Custo_Real'] - df_resumo['Custo_Estimado']\\n",
        "df_resumo['Desvio_Custo (%)'] = (df_resumo['Desvio_Custo'] / df_resumo['Custo_Estimado']) * 100\\n",
        "\\n",
        "data_atual = pd.to_datetime('today')\\n",
        "df_resumo['Atraso (dias)'] = (data_atual - df_resumo['Data_Fim']).dt.days\\n",
        "df_resumo.loc[df_resumo['Atraso (dias)'] < 0, 'Atraso (dias)'] = 0\\n",
        "\\n",
        "# ---------------------------------------------------\\n",
        "# Painel Gerencial Din√¢mico\\n",
        "\\n",
        "def painel_gerencial(obra='Todos', tipo_obra='Todos', engenheiro='Todos'):\\n",
        "    df_filtrado = df_resumo.copy()\\n",
        "\\n",
        "    if obra != 'Todos':\\n",
        "        df_filtrado = df_filtrado[df_filtrado['Nome_Obra'] == obra]\\n",
        "    if tipo_obra != 'Todos':\\n",
        "        df_filtrado = df_filtrado[df_filtrado['Tipo_Obra'] == tipo_obra]\\n",
        "    if engenheiro != 'Todos':\\n",
        "        df_filtrado = df_filtrado[df_filtrado['Engenheiro_Respons√°vel'] == engenheiro]\\n",
        "\\n",
        "    display(HTML(f\"<h3>Resultados para Obra: {obra}, Tipo: {tipo_obra}, Engenheiro: {engenheiro}</h3>\"))\\n",
        "    display(df_filtrado.head())\\n",
        "\\n",
        "    # Gr√°fico 1: Desvio de Custo por Obra (filtrado)\\n",
        "    fig1 = px.bar(df_filtrado.sort_values('Desvio_Custo (%)', ascending=False),\\n",
        "                 x='Nome_Obra',\\n",
        "                 y='Desvio_Custo (%)',\n",
        "                 color='Status',\n",
        "                 title='Desvio de Custo por Obra (filtrado)')\\n",
        "    fig1.show()\\n",
        "\\n",
        "    # Gr√°fico 2: Progresso da Obra vs Efici√™ncia M√©dia (filtrado)\\n",
        "    fig2 = px.scatter(df_filtrado,\\n",
        "                      x='Progresso (%)',\n",
        "                      y='Efici√™ncia_M√©dia',\n",
        "                      color='Nome_Obra',\n",
        "                      hover_name='Nome_Obra',\n",
        "                      title='Progresso da Obra vs Efici√™ncia M√©dia (filtrado)')\\n",
        "    fig2.show()\\n",
        "    \\n",
        "    # Gr√°fico 3: Cronograma Gantt simplificado para o filtro\\n",
        "    fig3 = px.timeline(df_filtrado,\n",
        "                       x_start='Data_In√≠cio',\n",
        "                       x_end='Data_Fim',\n",
        "                       y='Nome_Obra',\n",
        "                       color='Status',\n",
        "                       title='Cronograma das Obras (filtrado)')\n",
        "    fig3.update_yaxes(autorange='reversed')\n",
        "    fig3.show()\\n",
        "\n",
        "# ---------------------------------------------------\\n",
        "# Listas para dropdowns com op√ß√£o 'Todos'\\n",
        "lista_obras = ['Todos'] + sorted(df_resumo['Nome_Obra'].unique().tolist())\\n",
        "lista_tipos = ['Todos'] + sorted(df_resumo['Tipo_Obra'].unique().tolist())\\n",
        "lista_engenheiros = ['Todos'] + sorted(df_resumo['Engenheiro_Respons√°vel'].unique().tolist())\\n",
        "\n",
        "# Executar painel interativo\\n",
        "interact(painel_gerencial,\n",
        "         obra=widgets.Dropdown(options=lista_obras, description='Obra:'),\n",
        "         tipo_obra=widgets.Dropdown(options=lista_tipos, description='Tipo Obra:'),\n",
        "         engenheiro=widgets.Dropdown(options=lista_engenheiros, description='Engenheiro:'))\n",
        "         \\n",
        "# ---------------------------------------------------\\n",
        "# Conclus√£o\\n",
        "\\n",
        "\"\"\"\\n",
        "Este painel permite uma an√°lise integrada das obras e equipes...\n"
      ]
    }
  ]
}
